name: Build Docker Layer

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Variables
      id: vars
      run: |
        librsvg_version=$(cat Dockerfile | grep -Po '(?<=LIBRSVG_VERSION\=)(\d{1,3}.\d{1,3}.\d{1,3})')
        sha_short=$(git rev-parse --short HEAD)
        echo "::set-output name=librsvg_version::$librsvg_version"
        echo "::set-output name=sha_short::$sha_short"

        release_exists="true"
        git show-ref --tags --quiet --verify -- "refs/tags/$librsvg_version" || release_exists="false"
        echo "::set-output name=release_exists::$release_exists"

        if [[ "$GITHUB_EVENT_NAME" == "push" ]] && [[ "$GITHUB_REF" == "refs/heads/master" ]]
        then
          echo "::set-output name=deploy::true"
          echo "::set-output name=docker_tags::dev,latest,$librsvg_version,sha-$sha_short"
        else
          echo "::set-output name=deploy::false"
          echo "::set-output name=docker_tags::dev,sha-$sha_short"
        fi
    - name: Docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: bubblydoo/amazon-linux-librsvg-layer
        tag-custom: ${{ steps.vars.outputs.docker_tags }}
        tag-custom-only: true
    - name: Login to Docker Hub
      if: steps.vars.outputs.deploy == 'true'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Pull
      run: docker pull bubblydoo/amazon-linux-librsvg-layer:dev
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: ${{ steps.vars.outputs.deploy == 'true' }}
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-from: type=registry,ref=bubblydoo/amazon-linux-librsvg-layer:dev
        cache-to: type=inline
    - name: Copy artifacts
      run: docker run -v "${{ github.workspace }}/dist":/dist bubblydoo/amazon-linux-librsvg-layer:dev
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: librsvg-lambda-layer.zip
        path: dist/librsvg-layer.zip
        if-no-files-found: error
    - name: Create release
      if: ${{ steps.vars.outputs.deploy == 'true' && steps.vars.outputs.release_exists == 'false' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vars.outputs.librsvg_version }}
        release_name: Version ${{ steps.vars.outputs.librsvg_version }}
        draft: false
        prerelease: false
    - name: Upload release asset
      if: ${{ steps.vars.outputs.deploy == 'true' && steps.vars.outputs.release_exists == 'false' }}
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/librsvg-layer.zip
        asset_name: librsvg-lambda-layer.zip
        asset_content_type: application/zip
